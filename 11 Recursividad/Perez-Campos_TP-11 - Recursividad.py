# Trabajo Pr√°ctico N¬∞ 11 - Aplicaci√≥n de la Recursividad

# Ejercicio 1
"""Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular 
y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario"""

#funcion
def factorial_recur(num):
    if num == 0:
        return 1
    else:
        return num * factorial_recur(num-1)
    
#main
num = int(input("Ingrese un n√∫mero entero para calcular su factorial: "))
print(factorial_recur(num))


# Ejercicio 2
"""Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada.
Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique."""

#funcion
def fibonacci_recur(pos): #funcion para calcular el n√∫mero en la posici√≥n indicada
    if pos == 0 or pos == 1:
        return pos
    else:
        return fibonacci_recur(pos - 1) + fibonacci_recur(pos - 2)
    
#main
pos = int(input("Ingresa un n√∫mero entero que indique cu√°ntos elementos de la serie quiere mostrar: "))
print("Serie de Fibonacci:")
for i in range (pos +1):
    print(fibonacci_recur(i), end=" ")


# Ejercicio 3
"""Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, 
utilizando la f√≥rmula ùëõ^ùëö = ùëõ ‚àó ùëõ^(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general."""

#funcion
def potencia_recur(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia_recur(base, exponente -1)

base = int(input("Ingrese un n√∫mero entero para la base: "))
exponente = int(input("Ingrese un n√∫mero entero para el exponente: "))

resultado = potencia_recur(base, exponente)
print(f"{base} ^ {exponente} = {resultado}")


# Ejercicio 4
"""Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal 
y devuelva su representaci√≥n en binario como una cadena de texto."""

#funcion
def decimal_a_binario_recur(num):
    if num == 0:
        return ""
    else:
        return decimal_a_binario_recur(num//2) + str(num % 2)

#main
num = int(input("Ingrese un n√∫mero entero positivo para convertir a binario: "))
if num == 0:
    print(f"Cero convertido a binario es cero")
else:
    binario = decimal_a_binario_recur(num)
    print(f"{num} convertido a binario es {binario}")


# Ejercicio 5
"""Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de 
texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no lo es."""

#funcion
def es_palindromo_recur(palabra):
    if len(palabra) <= 1:
        return True
    if palabra[0] != palabra[-1]:
        return False
    else:
        return es_palindromo_recur(palabra[1:-1])

#main
palabra = str(input("Ingrese una palabra para evaluar si es un pal√≠ndromo: ")).lower().strip(" ")
if es_palindromo_recur(palabra):
    print(f"{palabra} es un pal√≠ndromo")
else:
    print(f"{palabra} no es un pal√≠ndromo")


# Ejercicio 6
"""Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero 
entero positivo y devuelva la suma de todos sus d√≠gitos."""
#funcion
def suma_digitos_recur(num):
    if num < 10:
        return num
    else: 
        return (num % 10) + suma_digitos_recur(num //10)

#main
num = int(input("Ingrese un n√∫mero entero positivo para obtener la suma de sus d√≠gitos: "))
print(f"La suma de los d√≠gitos de {num} es: {suma_digitos_recur(num)}")


# Ejercicio 7
"""Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques, 
en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con 
un solo bloque. Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques 
en el nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la pir√°mide."""

#funcion
def contar_bloques_recur(num):
    if num == 1:
        return 1
    else:
        return num + contar_bloques_recur(num - 1)

#main
num = int(input("Ingrese la cantidad de bloques en la base de la pir√°mide: "))
print(f"Para terminar de construir una pir√°mide con {num} bloques en su base, necesitamos {contar_bloques_recur(num)} bloques m√°s.")


# Ejercicio 8 
"""Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo 
(numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero."""

#funcion
def contar_digito_recur(num, digito):
    if num == 0:
        return 0
    if num % 10 == digito:
        return 1 + contar_digito_recur(num // 10, digito)
    else:
        return contar_digito_recur(num //10, digito)

#main
digito = int(input("Ingrese el d√≠gito que desea buscar en el n√∫mero: "))
num = int(input("Ingrese el n√∫mero en el que desea buscar el d√≠gito: "))
print(f"El d√≠gito {digito} aparece {contar_digito_recur(num,digito)} veces en el n√∫mero {num}")